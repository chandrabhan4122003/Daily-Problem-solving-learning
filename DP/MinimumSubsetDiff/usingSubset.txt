


package DynamicProgramming.MinimumSUbsetDIff;

public class usingSubset {
    public static void main(String[] args) {
        int[]arr={1,2,7};
        int range=0;
        for(int num:arr){
            range+=num;
        }
        int n=arr.length;
        boolean[][] dp=new boolean[n+1][range+1];
        for(int i=0;i<=n;i++) dp[i][0]=true;
        for(int j=1;j<=range;j++) dp[0][j]=false;

        for(int i=1;i<=n;i++){
            for(int j=1;j<=range;j++){
                if(arr[i-1]<=j){
                    dp[i][j]=dp[i-1][j-arr[i-1]]||dp[i-1][j];
                }
                else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        int min1=Integer.MAX_VALUE;
        for(int s1=0;s1<=range/2;s1++){
            if(dp[n][s1]){
                int s2=range-s1;
                min1=Math.min(min1,Math.abs(s2-s1));
            }
        }
        System.out.println(min1);

    }
}
