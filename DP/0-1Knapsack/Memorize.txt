package DynamicProgramming.KnapSack01;

import java.util.*;

public class Memorize {

    static int[][] dp;

    public static int knapSackMemo(int[] wt, int[] val, int W, int n) {
        if (n == 0 || W == 0) return 0;

        if (dp[n][W] != -1) {
            return dp[n][W];
        }

        if (wt[n - 1] <= W) {
            return dp[n][W] = Math.max(val[n - 1] + knapSackMemo(wt, val, W - wt[n - 1], n - 1),
                    knapSackMemo(wt, val, W, n - 1));
        } else {
            return dp[n][W] = knapSackfMemo(wt, val, W, n - 1);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] wt = {1, 3, 4, 5};
        int[] val = {1, 4, 5, 7};
        int W = 7;

        // Initialize dp array with -1
        dp = new int[wt.length + 1][W + 1];
        for (int[] row : dp)
            Arrays.fill(row, -1);

        int res = knapSackMemo(wt, val, W, wt.length);
        System.out.println(res);
    }
}
